pipeline {
  agent any//{
   // docker {
   //   image 'abhishekf5/maven-abhishek-docker-agent:v1'
   //   args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    //}
  //}
  tools {
     maven 'mvn'
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/Haykelyazidi/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        //sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        //sh 'mvn clean package'
      // withMaven(maven: 'mvn') {
       // sh 'cd /var/jenkins_home/workspace/haykel_pipeline_1/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
        sh 'cd /var/jenkins_home/workspace/haykel_pipeline_1/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean verify sonar:sonar -Dsonar.projectKey=haykel -Dsonar.projectName='haykel''

    //}  
    }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://51.91.204.154:9001"
      }
      steps {
           sh 'java -version'
           
        
        //   withSonarQubeEnv([string(installationName: ‘sq1’, credentialsId: ‘test1’)]) {    
           withCredentials([string(credentialsId: 'sonarhay', variable: '')]) {
         //  withSonarQubeEnv('SONAR') {
        //     withMaven(maven: 'mvn') { 
         //  withSonarQubeEnv([string(credentialsId: '', installationName: 'sq1')]){
             sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean install sonar:sonar -Dsonar.secret=${sonarhay} -Dsonar.host.url=${SONAR_URL}'
             // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.1.3006:sonar'
          //   sh ' mvn sonar:sonar // -X -Dsonar.secret=${sonar} -Dsonar.host.url=${SONAR_URL}'
          
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "haydevops/hay2665:${BUILD_NUMBER}"
        DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker_hub')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker_hub") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "Haykelyazidi"
        }
        steps {
            //withCredentials([string(credentialsId: 'github_credentials', variable: 'GITHUB_TOKEN')]) 
              withCredentials([gitUsernamePassword(credentialsId: 'github_credentials', gitToolName: 'Default')]) {
                sh '''
                    git config user.email "haykel.yazidi@gmail.com"
                    git config user.name "Haykelyazidi"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push origin main
                  '''
//https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
               
            }
        }
    }
  }
  }
